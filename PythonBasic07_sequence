시퀀스 자료형 = 순서가 있는 자료형, 리스트와 문자열이 포함됨.
a = "Once" #문자열
b = ['T', 'W', 'I', 'C', 'E'] #리스트
c =(1, 2, 3, 4, 5) #튜플

시퀀스의 특징

1. 원소간의 순서가 존재함. ---> 인덱싱/슬라이싱이 가능하다.
a = "once"
b = ['t', 'w', 'i', 'c', 'e']
print(a[1]) a의 첫번쨰 원소는 n
print(b[2:4]) 인덱스 번호 2부터 4미만 까지 #['i', 'c']

인덱싱/슬라이싱을 할 때 음수를 넣거나, 자리를 비우는것도 가능!
a = "once"
b = ['t', 'w', 'i', 'c', 'e']
print(a[-1]) #-1이기떄문에 맨 뒤로 간다는 의미. e가 출력.
print(b[:3]) #[?:3] 물음표 자리에 0이 생략되었다고 생각하고 처음부터 3미만까지 모든 원소 출력.

2. 맴버 조회. in 연산자로 시퀸스 안에 원소가 있는지 확인 가능.
a = "once"
b = ['t', 'w', 'i', 'c', 'e']
print('o' in a) #True 문자열 o가 문자열a에 있니?
print('b' in b) #Flase 문자열 b에 리스트 b에 있니?

3. 길이 확인. len 연산자로 시퀸스 안에 원소가 몇 개 인지 확인 가능.
a = "once"
b = ['t', 'w', 'i', 'c', 'e']
print(len(a)) #4 인덱스 엄버로 측정 NO
print(len(b)) #5

4. 연결 연산. + 연산자로 같은 시퀀스 두개를 이어 붙일 수 있다.
c = ['t', 'w', 'i'] + ['c', 'e']
print(c) #['t', 'w', 'i', 'c', 'e']

5. 반복연산. * 연산자로 시퀀스를 반복 할 수 있다.
d = "happy" * 3
print(d) #happyhappyhappy

